/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace example {

typedef struct _Message__isset {
  _Message__isset() : id(false), text(false) {}
  bool id;
  bool text;
} _Message__isset;

class Message {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  Message() : id(0), text() {
  }

  virtual ~Message() throw() {}

  int64_t id;
  std::string text;

  _Message__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_text(const std::string& val) {
    text = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message &a, Message &b);

} // namespace

#endif
